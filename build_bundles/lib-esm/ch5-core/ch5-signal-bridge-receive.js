import { Ch5SignalFactory } from './ch5-signal-factory';
import { Ch5Debug } from "./ch5-debug";
import { Ch5Signal } from "./ch5-signal";
const rcbIntervalTimers = {};
const rcbTimers = {};
const RCB_INTERVAL_DURATION_MS = 100;
export function bridgeReceiveIntegerFromNative(signalName, value) {
    const _signalName = Ch5Signal.getSubscriptionSignalName(signalName);
    const dbgKey = 'bridgeReceiveIntegerFromNative';
    Ch5Debug.info(dbgKey, '"' + _signalName + '":' + value);
    clearTimersForSignal(_signalName);
    const s = Ch5SignalFactory.getInstance().getNumberSignal(_signalName);
    if (s !== null) {
        s.fromSignalBridge(value);
    }
    const o = Ch5SignalFactory.getInstance().getObjectSignal(_signalName);
    const obj = { 'rcb': { 'value': value, 'time': 0 } };
    if (o !== null) {
        o.fromSignalBridge(obj);
    }
}
export function bridgeReceiveBooleanFromNative(signalName, value) {
    const _signalName = Ch5Signal.getSubscriptionSignalName(signalName);
    const dbgKey = 'bridgeReceiveBooleanFromNative';
    Ch5Debug.info(dbgKey, '"' + _signalName + '":' + value);
    const s = Ch5SignalFactory.getInstance().getBooleanSignal(_signalName);
    if (s !== null) {
        s.fromSignalBridge(value);
    }
}
export function bridgeReceiveStringFromNative(signalName, value) {
    const _signalName = Ch5Signal.getSubscriptionSignalName(signalName);
    const dbgKey = 'bridgeReceiveStringFromNative';
    Ch5Debug.info(dbgKey, '"' + _signalName + '":"' + value + '"');
    const s = Ch5SignalFactory.getInstance().getStringSignal(_signalName);
    if (s !== null) {
        s.fromSignalBridge(value);
    }
}
export function bridgeReceiveObjectFromNative(signalName, value) {
    const _signalName = Ch5Signal.getSubscriptionSignalName(signalName);
    const dbgKey = 'bridgeReceiveObjectFromNative';
    if (Ch5Debug.shouldDisplay(dbgKey)) {
        Ch5Debug.info(dbgKey, '"' + _signalName + '":\'' + JSON.stringify(value) + '\'');
    }
    const s = Ch5SignalFactory.getInstance().getObjectSignal(_signalName);
    if (s !== null) {
        if (isRcbObject(value)) {
            let scalarValue = 0;
            const n = Ch5SignalFactory.getInstance().getNumberSignal(_signalName);
            if (n !== null) {
                scalarValue = n.value;
            }
            s.fromSignalBridge(processReceivedRcb(_signalName, value, scalarValue));
        }
        else {
            s.fromSignalBridge(value);
        }
    }
}
function isRcbObject(obj) {
    return (obj.hasOwnProperty('rcb')
        && obj.rcb.hasOwnProperty('value')
        && obj.rcb.hasOwnProperty('time'));
}
function processReceivedRcb(signalName, rcbObj, currentScalarValue) {
    const dbgKey = 'bridge.processReceivedRcb';
    Ch5Debug.info(dbgKey, ' process rcb ', 'signalName ' + signalName, ' rcbObject ', rcbObj, ' current scalar value', currentScalarValue);
    clearTimersForSignal(signalName);
    const rcbObject = {
        'rcb': {
            'value': rcbObj.rcb.value,
            'time': rcbObj.rcb.time,
            'startv': currentScalarValue,
            'startt': Date.now()
        }
    };
    const timerId = window.setTimeout(rcbTimerCallback, rcbObj.rcb.time, signalName, rcbObject);
    rcbTimers[signalName] = timerId;
    if (RCB_INTERVAL_DURATION_MS < rcbObj.rcb.time) {
        const intervalId = window.setInterval(rcbIntervalTimerCallback, RCB_INTERVAL_DURATION_MS, signalName, rcbObject);
        rcbIntervalTimers[signalName] = intervalId;
    }
    return rcbObject;
}
function rcbIntervalTimerCallback(signalName, rcbObject) {
    const dbgKey = 'bridge.rcbIntervalTimerCallback';
    Ch5Debug.info(dbgKey, ' start ', 'signalName ' + signalName, ' rcbObject ', rcbObject);
    if (rcbObject.rcb.time === 0) {
        return;
    }
    const slope = (rcbObject.rcb.value - rcbObject.rcb.startv) / rcbObject.rcb.time;
    const x = (Date.now() - rcbObject.rcb.startt);
    let scalarValue = slope * x + rcbObject.rcb.startv;
    const s = Ch5SignalFactory.getInstance().getNumberSignal(signalName);
    if (slope > 0) {
        scalarValue = Math.floor(scalarValue);
    }
    else if (slope < 0) {
        scalarValue = Math.ceil(scalarValue);
    }
    else {
        scalarValue = Math.round(scalarValue);
    }
    if (s !== null && s.value !== scalarValue) {
        s.fromSignalBridge(scalarValue);
    }
}
function rcbTimerCallback(signalName, rcbObject) {
    const dbgKey = 'bridge.rcbTimerCallback';
    Ch5Debug.info(dbgKey, ' start ', 'signalName ' + signalName, ' rcbObject ', rcbObject);
    const value = rcbObject.rcb.value;
    const s = Ch5SignalFactory.getInstance().getNumberSignal(signalName);
    if (s !== null) {
        s.fromSignalBridge(value);
    }
    const o = Ch5SignalFactory.getInstance().getObjectSignal(signalName);
    const obj = { 'rcb': { 'value': value, 'time': 0 } };
    if (o !== null) {
        o.fromSignalBridge(obj);
    }
    clearTimersForSignal(signalName);
}
function clearTimersForSignal(signalName) {
    const dbgKey = 'bridge.clearTimersForSignal';
    Ch5Debug.info(dbgKey, ' start ', 'signalName ' + signalName);
    if (rcbIntervalTimers.hasOwnProperty(signalName)) {
        window.clearInterval(rcbIntervalTimers[signalName]);
        delete rcbIntervalTimers[signalName];
    }
    if (rcbTimers.hasOwnProperty(signalName)) {
        window.clearTimeout(rcbTimers[signalName]);
        delete rcbTimers[signalName];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2g1LXNpZ25hbC1icmlkZ2UtcmVjZWl2ZS5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImNoNS1jb3JlL2NoNS1zaWduYWwtYnJpZGdlLXJlY2VpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBMkJ6QyxNQUFNLGlCQUFpQixHQUFHLEVBQW9DLENBQUM7QUFDL0QsTUFBTSxTQUFTLEdBQUcsRUFBNEIsQ0FBQztBQUMvQyxNQUFNLHdCQUF3QixHQUFHLEdBQUcsQ0FBQztBQUVyQyxNQUFNLFVBQVUsOEJBQThCLENBQUMsVUFBa0IsRUFBRSxLQUFhO0lBRTVFLE1BQU0sV0FBVyxHQUFXLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUU1RSxNQUFNLE1BQU0sR0FBRyxnQ0FBZ0MsQ0FBQztJQUNoRCxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztJQUV4RCxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVsQyxNQUFNLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEUsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ1osQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzdCO0lBRUQsTUFBTSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sR0FBRyxHQUF1QixFQUFFLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxL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