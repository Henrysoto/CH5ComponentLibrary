import { assert } from 'chai';
import { describe } from 'mocha';
import { bridgeReceiveObjectFromNative, bridgeReceiveBooleanFromNative, bridgeReceiveIntegerFromNative, bridgeReceiveStringFromNative } from "./../ch5-core/ch5-signal-bridge-receive";
import { subscribeState, unsubscribeState } from "../ch5-core";
import { Ch5Debug } from "../ch5-core/ch5-debug";
describe('Ch5Resync', () => {
    const boolA = 'fb1';
    let boolAVal = true;
    let boolASub;
    const boolB = 'fb2';
    let boolBVal = true;
    let boolBSub;
    const boolG = 'MyContract.BoolG';
    let boolGVal = true;
    let boolGSub;
    const boolH = 'MyContract.BoolH';
    let boolHVal = true;
    let boolHSub;
    const numberC = 'fb1';
    let numberCVal = 100;
    let numberCSub;
    const numberD = 'fb2';
    let numberDVal = 100;
    const numberJ = 'MyContract.NumJ';
    let numberJVal = 100;
    let numberJSub;
    const numberK = 'MyContract.NumK';
    let numberKVal = 100;
    let numberKSub;
    const stringE = 'fb1';
    const stringF = 'fb2';
    const stringM = 'MyContract.StringM';
    const stringN = 'MyContract.StringN';
    const NOT_EMPTY = 'NOT EMPTY';
    const EMPTY = '';
    let stringEVal = NOT_EMPTY;
    let stringFVal = NOT_EMPTY;
    let stringMVal = NOT_EMPTY;
    let stringNVal = NOT_EMPTY;
    let stringESub;
    let stringFSub;
    let stringMSub;
    let stringNSub;
    before(() => {
    });
    after(() => {
        Ch5Debug.setConfigKeyValue('Ch5Resync', false);
    });
    beforeEach(() => {
        boolASub = subscribeState('b', boolA, (value) => { boolAVal = value; });
        boolBSub = subscribeState('b', boolB, (value) => { boolBVal = value; });
        boolGSub = subscribeState('b', boolG, (value) => { boolGVal = value; });
        boolHSub = subscribeState('b', boolH, (value) => { boolHVal = value; });
        numberCSub = subscribeState('n', numberC, (value) => { numberCVal = value; });
        numberJSub = subscribeState('n', numberJ, (value) => { numberJVal = value; });
        numberKSub = subscribeState('n', numberK, (value) => { numberKVal = value; });
        stringESub = subscribeState('s', stringE, (value) => { stringEVal = value; });
        stringFSub = subscribeState('s', stringF, (value) => { stringFVal = value; });
        stringMSub = subscribeState('s', stringM, (value) => { stringMVal = value; });
        stringNSub = subscribeState('s', stringN, (value) => { stringNVal = value; });
    });
    afterEach(() => {
        unsubscribeState('b', boolA, boolASub);
        unsubscribeState('b', boolB, boolBSub);
        unsubscribeState('b', boolG, boolGSub);
        unsubscribeState('b', boolH, boolHSub);
        unsubscribeState('n', numberC, numberCSub);
        unsubscribeState('n', numberD, numberCSub);
        unsubscribeState('n', numberJ, numberJSub);
        unsubscribeState('n', numberK, numberKSub);
        unsubscribeState('s', stringE, stringESub);
        unsubscribeState('s', stringF, stringFSub);
        unsubscribeState('s', stringM, stringMSub);
        unsubscribeState('s', stringN, stringNSub);
    });
    it('sanity', () => {
        assert.equal(boolBVal, false, "boolBVal not false at start");
        bridgeReceiveBooleanFromNative(boolB, true);
        assert.equal(boolBVal, true, "boolBVal not true after bridgeReceiveBoolFromNative sets to true");
    });
    const commonPreSOUSetJoins = () => {
        bridgeReceiveBooleanFromNative(boolB, false);
        bridgeReceiveBooleanFromNative(boolH, false);
        assert.equal(boolBVal, false, "boolBVal not false after bridgeReceiveBoolFromNative sets to false");
        assert.equal(boolHVal, false, "boolHVal not false after bridgeReceiveBoolFromNative sets to false");
        bridgeReceiveBooleanFromNative(boolA, true);
        bridgeReceiveBooleanFromNative(boolG, true);
        assert.equal(boolAVal, true, "boolAVal not true after bridgeReceiveBoolFromNative sets to true");
        assert.equal(boolGVal, true, "boolGVal not true after bridgeReceiveBoolFromNative sets to true");
        bridgeReceiveIntegerFromNative(numberD, 0);
        bridgeReceiveIntegerFromNative(numberK, 0);
        assert.equal(numberDVal, 0, "numberDVal not 0 after bridgeReceiveIntegerFromNative sets to 0");
        assert.equal(numberKVal, 0, "nubmerKVal not 0 after bridgeReceiveIntegerFromNative sets to 0");
        bridgeReceiveIntegerFromNative(numberC, 100);
        bridgeReceiveIntegerFromNative(numberJ, 100);
        assert.equal(numberCVal, 100, "numberCVal not 100 after bridgeReceiveIntegerFromNative sets to 100");
        assert.equal(numberJVal, 100, "numberJVal not 100 after bridgeReceiveIntegerFromNative sets to 100");
        bridgeReceiveStringFromNative(stringF, EMPTY);
        bridgeReceiveStringFromNative(stringE, NOT_EMPTY);
        bridgeReceiveStringFromNative(stringN, EMPTY);
        bridgeReceiveStringFromNative(stringM, NOT_EMPTY);
        assert.equal(stringFVal, EMPTY, `string:${stringF} not "${EMPTY}" after bridgeReceiveStringFromNative`);
        assert.equal(stringEVal, NOT_EMPTY, `string:${stringE} not "${NOT_EMPTY}" after bridgeReceiveStringFromNative`);
        assert.equal(stringNVal, EMPTY, `string:${stringN} not "${EMPTY}" after bridgeReceiveStringFromNative`);
        assert.equal(stringMVal, NOT_EMPTY, `string:${stringM} not "${NOT_EMPTY}" after bridgeReceiveStringFromNative`);
    };
    const commonBetweenSOUandEOUSetNumericJoins = () => {
        bridgeReceiveBooleanFromNative(boolB, true);
        bridgeReceiveIntegerFromNative(numberD, 100);
        bridgeReceiveStringFromNative(stringF, NOT_EMPTY);
    };
    const commonBetweenSOUandEOUSetSymbolJoins = () => {
        bridgeReceiveBooleanFromNative(boolH, true);
        bridgeReceiveIntegerFromNative(numberK, 100);
        bridgeReceiveStringFromNative(stringN, NOT_EMPTY);
    };
    const commonVerifyNumericJoins = () => {
        assert.equal(boolBVal, true, `boolean:${boolB} not true after EOU`);
        assert.equal(boolAVal, false, `boolean:${boolA} not false after EOU`);
        assert.equal(numberDVal, 100, `number:${numberD} not 100 after EOU`);
        assert.equal(numberCVal, 0, `number:${numberC} not 0 after EOU`);
        assert.equal(stringEVal, EMPTY, `string:${stringE} not "${EMPTY}" after EOU`);
        assert.equal(stringFVal, NOT_EMPTY, `string:${stringF} not "${NOT_EMPTY}" after EOU`);
    };
    const commonVerifySymbolicJoins = () => {
        assert.equal(boolHVal, true, `boolean:${boolH} not true after EOU`);
        assert.equal(boolGVal, false, `boolean ${boolG} not false after EOU`);
        assert.equal(numberKVal, 100, `number:${numberK} not 100 after EOU`);
        assert.equal(numberJVal, 0, `number:${numberJ} not 0 after EOU`);
        assert.equal(stringMVal, EMPTY, `string:${stringM} not "${EMPTY}" after EOU`);
        assert.equal(stringNVal, NOT_EMPTY, `string:${stringN} not "${NOT_EMPTY}" after EOU`);
    };
    it('Should not clear joins in case EOU is not received', () => {
        boolAVal = true;
        boolBVal = true;
        boolGVal = true;
        boolHVal = true;
        numberCVal = 100;
        numberDVal = 100;
        numberJVal = 100;
        numberKVal = 100;
        stringEVal = NOT_EMPTY;
        stringFVal = NOT_EMPTY;
        stringMVal = NOT_EMPTY;
        stringNVal = NOT_EMPTY;
        bridgeReceiveObjectFromNative('Csig.State_Synchronization', {
            id: "localhost-03",
            state: "StartOfUpdateRange",
            value: {
                excludePrefixes: ["Csig"],
                range: {
                    "boolean": { "stateNames": [], "joinLow": 1, "joinHigh": 2 },
                    "numeric": { "stateNames": [], "joinLow": 1, "joinHigh": 2 },
                    "string": { "stateNames": [], "joinLow": 1, "joinHigh": 2 }
                }
            }
        });
        assert.equal(boolAVal, true, `${boolA} is cleared`);
        assert.equal(boolBVal, true, `${boolB} is cleared`);
        assert.equal(numberCVal, 100, `${numberC} is cleared`);
        assert.equal(numberDVal, 100, `${numberD} is cleared`);
        assert.equal(stringEVal, NOT_EMPTY, `${stringE} is cleared`);
        assert.equal(stringFVal, NOT_EMPTY, `${stringF} is cleared`);
    });
    it(`Should set the value of ${boolA} bool received between SOU and EOU even though is contained in the joins range`, () => {
        bridgeReceiveObjectFromNative('Csig.State_Synchronization', {
            id: "localhost-03",
            state: "StartOfUpdateRange",
            value: {
                excludePrefixes: ["Csig"],
                range: {
                    "boolean": { "stateNames": [], "joinLow": 1, "joinHigh": 1 },
                    "numeric": { "stateNames": [], "joinLow": 1, "joinHigh": 1 },
                    "string": { "stateNames": [], "joinLow": 1, "joinHigh": 1 }
                }
            }
        });
        bridgeReceiveBooleanFromNative('fb1', true);
        bridgeReceiveStringFromNative('fb1', NOT_EMPTY);
        bridgeReceiveIntegerFromNative('fb1', 101);
        bridgeReceiveObjectFromNative('Csig.State_Synchronization', { "id": "localhost-03", "state": "EndOfUpdate" });
        assert.equal(boolAVal, true, `${boolA} bool received between SOU and EOU is cleared`);
        assert.equal(stringEVal, NOT_EMPTY, `${boolA} string received between SOU and EOU is cleared`);
        assert.equal(numberCVal, 101, `${boolA} number received between SOU and EOU is cleared`);
    });
});
//# sourceMappingURL=data:application/json;base64,