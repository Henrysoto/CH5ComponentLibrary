import { expect } from 'chai';
import { describe } from 'mocha';
import { LogLevelEnum } from '../enums';
import { LogMessagesFilter } from '../helpers/LogMessagesFilter';
describe('Ch5-debug-filter-message-tests', () => {
    let dataLog;
    let logFilter;
    beforeEach(() => {
        dataLog = {
            level: LogMessagesFilter.getDefaultLevel(),
            message: 'Test message',
            source: ''
        };
        logFilter = new LogMessagesFilter(LogLevelEnum.info, '', 'test');
    });
    it('Default logFilter level is warning', () => {
        const defaultLevel = LogMessagesFilter.getDefaultLevel();
        expect(defaultLevel).to.be.equal(LogLevelEnum.warning);
    });
    it('Log messages with level >= filter level should be displayed', () => {
        dataLog.level = LogLevelEnum.info;
        logFilter.level = LogLevelEnum.error;
        const levelMatch1 = logFilter.isMatchingFilterLevel(dataLog.level);
        const canBeDisplayed1 = logFilter.applyFilter(dataLog);
        expect(levelMatch1).to.be.equal(false);
        expect(canBeDisplayed1).to.be.equal(false);
        dataLog.level = LogLevelEnum.error;
        logFilter.level = LogLevelEnum.warning;
        const levelMatch2 = logFilter.isMatchingFilterLevel(dataLog.level);
        const canBeDisplayed2 = logFilter.applyFilter(dataLog);
        expect(levelMatch2).to.be.equal(true);
        expect(canBeDisplayed2).to.be.equal(true);
    });
    it('Will return true if log levels match and different than default level', () => {
        dataLog.level = LogLevelEnum.error;
        logFilter.level = LogLevelEnum.error;
        const levelMatch = logFilter.isMatchingFilterLevel(dataLog.level);
        const canBeDisplayed = logFilter.applyFilter(dataLog);
        expect(levelMatch).to.be.equal(true);
        expect(canBeDisplayed).to.be.equal(true);
    });
    it('When filtering by message it is not case sensitive', () => {
        const regexMatch = logFilter.isMatchingFilterRegex(dataLog.message);
        const canBeDisplayed = logFilter.applyFilter(dataLog);
        expect(regexMatch).to.be.equal(true);
        expect(canBeDisplayed).to.be.equal(true);
    });
    it('Filtering by message using complex regex', () => {
        logFilter.regularExpression = '^test.*age$';
        const regexMatch = logFilter.isMatchingFilterRegex(dataLog.message);
        const canBeDisplayed = logFilter.applyFilter(dataLog);
        expect(regexMatch).to.be.equal(true);
        expect(canBeDisplayed).to.be.equal(true);
        logFilter.regularExpression = '^test.*gorilla$';
        const rMatch = logFilter.isMatchingFilterRegex(dataLog.message);
        const canBeShown = logFilter.applyFilter(dataLog);
        expect(rMatch).to.be.equal(false);
        expect(canBeShown).to.be.equal(false);
    });
    it('Filter by source', () => {
        dataLog.source = 'Ch5SignalBridge.constructor';
        logFilter.source = 'Ch5SignalBridge.constructor';
        const fileMatch1 = logFilter.isMatchingFilterSource(dataLog.source);
        const canBeDisplayed1 = logFilter.applyFilter(dataLog);
        expect(fileMatch1).to.be.equal(true);
        expect(canBeDisplayed1).to.be.equal(true);
        logFilter.source = 'Ch5SignalBridge.subscribe';
        const fileMatch2 = logFilter.isMatchingFilterSource(dataLog.source);
        const canBeDisplayed2 = logFilter.applyFilter(dataLog);
        expect(fileMatch2).to.be.equal(false);
        expect(canBeDisplayed2).to.be.equal(false);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyTWVzc2FnZS5zcGVjLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsiY2g1LWxvZ2dlci90ZXN0cy9maWx0ZXJNZXNzYWdlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRWpDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDeEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFakUsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtJQUU1QyxJQUFJLE9BQWlCLENBQUM7SUFDdEIsSUFBSSxTQUE0QixDQUFDO0lBRWpDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixPQUFPLEdBQUc7WUFDTixLQUFLLEVBQUUsaUJBQWlCLENBQUMsZUFBZSxFQUFFO1lBQzFDLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCLE1BQU0sRUFBRSxFQUFFO1NBQ2IsQ0FBQztRQUVGLFNBQVMsR0FBRyxJQUFJLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JFLENBQUMsQ0FBQyxDQUFDO0lBR0gsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLFlBQVksR0FBaUIsaUJBQWlCLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2REFBNkQsRUFBRSxHQUFHLEVBQUU7UUFDbkUsT0FBTyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ2xDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQztRQUVyQyxNQUFNLFdBQVcsR0FBWSxTQUFTLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzNFLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHdkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUzQyxPQUFPLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFDbkMsU0FBUyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBRXZDLE1BQU0sV0FBVyxHQUFZLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDM0UsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUd2RCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVFQUF1RSxFQUFFLEdBQUcsRUFBRTtRQUM3RSxPQUFPLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFDbkMsU0FBUyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBRXJDLE1BQU0sVUFBVSxHQUFZLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENB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